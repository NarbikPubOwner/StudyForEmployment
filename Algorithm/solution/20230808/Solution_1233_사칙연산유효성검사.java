
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Solution_1233_사칙연산유효성검사 {
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		for (int t = 0; t < 10; t++) {
			int N = Integer.parseInt(br.readLine());

			boolean result = true;
			for (int i = 0; i < N; i++) {
				String[] sArr = br.readLine().split(" ");
				if (sArr.length == 4) {
					if (!(sArr[1].equals("+") || sArr[1].equals("-") || sArr[1].equals("*") || sArr[1].equals("/"))) {
						result = false;
						// break;
					}
				} else {
					if (sArr[1].equals("+") || sArr[1].equals("-") || sArr[1].equals("*") || sArr[1].equals("/")) {
						result = false;
						// break;
					}
				}
			}
			if (result) {
				System.out.println("#" + (t+1) + "0");
			} else
				System.out.println("#" + (t+1) + "1");
		}
	}
}

//171
//1 - 2 3
//2 - 4 5
//3 + 6 7
//4 / 8 9
//5 - 10 11
//6 + 12 13
//7 - 14 15
//8 - 16 17
//9 * 18 19
//10 7 20 21
//11 * 22 23
//12 - 24 25
//13 * 26 27
//14 / 28 29
//15 + 30 31
//16 - 32 33
//17 / 34 35
//18 * 36 37
//19 * 38 39
//20 3 40 41
//21 + 42 43
//22 - 44 45
//23 / 46 47
//24 * 48 49
//25 * 50 51
//26 / 52 53
//27 - 54 55
//28 - 56 57
//29 + 58 59
//30 / 60 61
//31 / 62 63
//32 * 64 65
//33 / 66 67
//34 / 68 69
//35 - 70 71
//36 / 72 73
//37 + 74 75
//38 - 76 77
//39 * 78 79
//40 + 80 81
//41 2 82 83
//42 * 84 85
//43 / 86 87
//44 - 88 89
//45 - 90 91
//46 - 92 93
//47 * 94 95
//48 / 96 97
//49 * 98 99
//50 + 100 101
//51 * 102 103
//52 + 104 105
//53 * 106 107
//54 / 108 109
//55 * 110 111
//56 - 112 113
//57 / 114 115
//58 * 116 117
//59 - 118 119
//60 * 120 121
//61 * 122 123
//62 * 124 125
//63 * 126 127
//64 + 128 129
//65 - 130 131
//66 * 132 133
//67 - 134 135
//68 / 136 137
//69 + 138 139
//70 / 140 141
//71 / 142 143
//72 - 144 145
//73 * 146 147
//74 * 148 149
//75 - 150 151
//76 - 152 153
//77 * 154 155
//78 + 156 157
//79 * 158 159
//80 / 160 161
//81 - 162 163
//82 9 164 165
//83 3 166 167
//84 / 168 169
//85 * 170 171
//86 4
//87 2
//88 8
//89 3
//90 6
//91 3
//92 6
//93 8
//94 1
//95 9
//96 4
//97 4
//98 3
//99 3
//100 7
//101 7
//102 2
//103 2
//104 7
//105 9
//106 7
//107 1
//108 8
//109 3
//110 9
//111 3
//112 6
//113 3
//114 1
//115 7
//116 2
//117 1
//118 7
//119 9
//120 2
//121 7
//122 9
//123 3
//124 7
//125 1
//126 9
//127 3
//128 6
//129 9
//130 1
//131 9
//132 7
//133 8
//134 1
//135 6
//136 8
//137 9
//138 1
//139 7
//140 2
//141 3
//142 4
//143 4
//144 2
//145 2
//146 8
//147 8
//148 3
//149 1
//150 6
//151 6
//152 7
//153 4
//154 3
//155 1
//156 6
//157 9
//158 4
//159 3
//160 4
//161 1
//162 4
//163 -
//164 -
//165 *
//166 -
//167 *
//168 -
//169 7
//170 4
//171 2

//109
//1 + 2 3
//2 + 4 5
//3 - 6 7
//4 + 8 9
//5 - 10 11
//6 * 12 13
//7 / 14 15
//8 / 16 17
//9 + 18 19
//10 + 20 21
//11 - 22 23
//12 * 24 25
//13 * 26 27
//14 - 28 29
//15 + 30 31
//16 * 32 33
//17 + 34 35
//18 / 36 37
//19 + 38 39
//20 - 40 41
//21 / 42 43
//22 - 44 45
//23 + 46 47
//24 - 48 49
//25 * 50 51
//26 - 52 53
//27 - 54 55
//28 / 56 57
//29 / 58 59
//30 * 60 61
//31 - 62 63
//32 * 64 65
//33 / 66 67
//34 * 68 69
//35 / 70 71
//36 * 72 73
//37 + 74 75
//38 - 76 77
//39 * 78 79
//40 + 80 81
//41 - 82 83
//42 * 84 85
//43 - 86 87
//44 * 88 89
//45 + 90 91
//46 * 92 93
//47 - 94 95
//48 * 96 97
//49 + 98 99
//50 + 100 101
//51 / 102 103
//52 / 104 105
//53 + 106 107
//54 * 108 109
//55 3
//56 8
//57 5
//58 8
//59 4
//60 7
//61 4
//62 9
//63 2
//64 9
//65 8
//66 1
//67 2
//68 3
//69 3
//70 7
//71 7
//72 8
//73 9
//74 2
//75 5
//76 3
//77 3
//78 3
//79 6
//80 4
//81 8
//82 7
//83 4
//84 1
//85 6
//86 6
//87 6
//88 5
//89 8
//90 8
//91 6
//92 9
//93 5
//94 1
//95 6
//96 8
//97 7
//98 9
//99 6
//100 9
//101 5
//102 1
//103 3
//104 2
//105 1
//106 7
//107 9
//108 6
//109 6

////import java.io.BufferedReader;
////import java.io.IOException;
////import java.io.InputStreamReader;
////import java.util.ArrayDeque;
////import java.util.Queue;
////import java.util.StringTokenizer;
////
////public class Solution_1233_사칙연산유효성검사 {
////	public static void main(String[] args) throws NumberFormatException, IOException {
////		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
////		int N = Integer.parseInt(br.readLine());
////		StringTokenizer st;
////		
////		
////		
////		
//////		tree.bfs();
////	}
////}
//
//import java.io.BufferedReader;
//import java.io.IOException;
//import java.io.InputStreamReader;
//import java.util.ArrayDeque;
//import java.util.Queue;
//import java.util.StringTokenizer;
//
//class BinaryTree {
//	private String[] nodes;
//	private int lastIndex = 0;
//	private final int SIZE; // 최대 노드의 개수
//
//	public BinaryTree(int size) {
//		SIZE = size;
//		nodes = new String[SIZE + 1];
//	}
//
//	void add(String value) {
//		nodes[++lastIndex] = value;
//	}
//
//	void bfs() {
//		Queue<Integer> q = new ArrayDeque<Integer>();
//		q.offer(1);
//
//		while (!q.isEmpty()) {
//			int idx = q.poll();
//			System.out.println(nodes[idx]);
//			if (idx * 2 <= lastIndex)
//				q.offer(idx * 2);
//			if (idx * 2 + 1 <= lastIndex)
//				q.offer(idx * 2 + 1);
//		}
//	}
//
//	boolean isRight(boolean isNumeric, int i) {
//		if (i >= lastIndex) {
//			if (isNumeric)
//				return true;
//			else
//				return false;
//		}
//		boolean rightRight = false;
//		boolean leftRight = false;
//
////		if (!isNumeric(nodes[i])) {// 사칙연산 문자라는 뜻
//		leftRight = isRight(isNumeric(nodes[i]), i * 2);
//		rightRight = isRight(isNumeric(nodes[i]), i * 2 + 1);
////		} else
////			return true;
//
//		if (rightRight && leftRight) {
//			return true;
//		}
//		return false;
//	}
//
//	boolean isNumeric(String strNum) {
//		if (strNum == null) {
//			return false;
//		}
//		try {
//			Integer.parseInt(strNum);
//			return true;
//		} catch (NumberFormatException e) {
//			return false;
//		}
//	}
//}
//
////
//////배열로 이진트리를 구성하고, 값을 그대로 다 넣는다
//////처음부터 돌면서 기호를 만나면 -> left와 right의 값을 검사한다, 값이 기호라면 계속 들어감, 숫자라면 end, null이라면 오류
//////재귀? 
//public class Solution_1233_사칙연산유효성검사 {
//	public static void main(String[] args) throws NumberFormatException, IOException {
//		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
//		for (int t = 0; t < 10; t++) {
//			int N = Integer.parseInt(br.readLine());
//			StringTokenizer st;
//			BinaryTree tree = new BinaryTree(N);
//			for (int i = 0; i < N; i++) {
//				st = new StringTokenizer(br.readLine(), " ");
//				st.nextToken();
//				tree.add(st.nextToken());
//			}
//			System.out.println(tree.isRight(true, 1));
//		}
//		
//
////		tree.bfs();
//	}
//}
//
////171
////1 - 2 3
////2 - 4 5
////3 + 6 7
////4 / 8 9
////5 - 10 11
////6 + 12 13
////7 - 14 15
////8 - 16 17
////9 * 18 19
////10 7 20 21
////11 * 22 23
////12 - 24 25
////13 * 26 27
////14 / 28 29
////15 + 30 31
////16 - 32 33
////17 / 34 35
////18 * 36 37
////19 * 38 39
////20 3 40 41
////21 + 42 43
////22 - 44 45
////23 / 46 47
////24 * 48 49
////25 * 50 51
////26 / 52 53
////27 - 54 55
////28 - 56 57
////29 + 58 59
////30 / 60 61
////31 / 62 63
////32 * 64 65
////33 / 66 67
////34 / 68 69
////35 - 70 71
////36 / 72 73
////37 + 74 75
////38 - 76 77
////39 * 78 79
////40 + 80 81
////41 2 82 83
////42 * 84 85
////43 / 86 87
////44 - 88 89
////45 - 90 91
////46 - 92 93
////47 * 94 95
////48 / 96 97
////49 * 98 99
////50 + 100 101
////51 * 102 103
////52 + 104 105
////53 * 106 107
////54 / 108 109
////55 * 110 111
////56 - 112 113
////57 / 114 115
////58 * 116 117
////59 - 118 119
////60 * 120 121
////61 * 122 123
////62 * 124 125
////63 * 126 127
////64 + 128 129
////65 - 130 131
////66 * 132 133
////67 - 134 135
////68 / 136 137
////69 + 138 139
////70 / 140 141
////71 / 142 143
////72 - 144 145
////73 * 146 147
////74 * 148 149
////75 - 150 151
////76 - 152 153
////77 * 154 155
////78 + 156 157
////79 * 158 159
////80 / 160 161
////81 - 162 163
////82 9 164 165
////83 3 166 167
////84 / 168 169
////85 * 170 171
////86 4
////87 2
////88 8
////89 3
////90 6
////91 3
////92 6
////93 8
////94 1
////95 9
////96 4
////97 4
////98 3
////99 3
////100 7
////101 7
////102 2
////103 2
////104 7
////105 9
////106 7
////107 1
////108 8
////109 3
////110 9
////111 3
////112 6
////113 3
////114 1
////115 7
////116 2
////117 1
////118 7
////119 9
////120 2
////121 7
////122 9
////123 3
////124 7
////125 1
////126 9
////127 3
////128 6
////129 9
////130 1
////131 9
////132 7
////133 8
////134 1
////135 6
////136 8
////137 9
////138 1
////139 7
////140 2
////141 3
////142 4
////143 4
////144 2
////145 2
////146 8
////147 8
////148 3
////149 1
////150 6
////151 6
////152 7
////153 4
////154 3
////155 1
////156 6
////157 9
////158 4
////159 3
////160 4
////161 1
////162 4
////163 -
////164 -
////165 *
////166 -
////167 *
////168 -
////169 7
////170 4
////171 2
//
////109
////1 + 2 3
////2 + 4 5
////3 - 6 7
////4 + 8 9
////5 - 10 11
////6 * 12 13
////7 / 14 15
////8 / 16 17
////9 + 18 19
////10 + 20 21
////11 - 22 23
////12 * 24 25
////13 * 26 27
////14 - 28 29
////15 + 30 31
////16 * 32 33
////17 + 34 35
////18 / 36 37
////19 + 38 39
////20 - 40 41
////21 / 42 43
////22 - 44 45
////23 + 46 47
////24 - 48 49
////25 * 50 51
////26 - 52 53
////27 - 54 55
////28 / 56 57
////29 / 58 59
////30 * 60 61
////31 - 62 63
////32 * 64 65
////33 / 66 67
////34 * 68 69
////35 / 70 71
////36 * 72 73
////37 + 74 75
////38 - 76 77
////39 * 78 79
////40 + 80 81
////41 - 82 83
////42 * 84 85
////43 - 86 87
////44 * 88 89
////45 + 90 91
////46 * 92 93
////47 - 94 95
////48 * 96 97
////49 + 98 99
////50 + 100 101
////51 / 102 103
////52 / 104 105
////53 + 106 107
////54 * 108 109
////55 3
////56 8
////57 5
////58 8
////59 4
////60 7
////61 4
////62 9
////63 2
////64 9
////65 8
////66 1
////67 2
////68 3
////69 3
////70 7
////71 7
////72 8
////73 9
////74 2
////75 5
////76 3
////77 3
////78 3
////79 6
////80 4
////81 8
////82 7
////83 4
////84 1
////85 6
////86 6
////87 6
////88 5
////89 8
////90 8
////91 6
////92 9
////93 5
////94 1
////95 6
////96 8
////97 7
////98 9
////99 6
////100 9
////101 5
////102 1
////103 3
////104 2
////105 1
////106 7
////107 9
////108 6
////109 6
